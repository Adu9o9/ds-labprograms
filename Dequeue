Dequeue(Diuble Ended Queue)
Algorithm
1.Start

4.Initialize:
  Set front = -1 and rear = -1
3.Read size of deque

5.Function Definitions:

*isFull():
  If (rear + 1) % size == front, return True (Deque is full)
  Else, return False
*isEmpty():
  If front == -1, return True (Deque is empty)
  Else, return False
*enqueueRear(element):
  If isFull(), print "Overflow"
  Else,
  If isEmpty(), set front = rear = 0
  Else, set rear = (rear + 1) % size
  Insert element in queue[rear]
*enqueueFront(element):
  If isFull(), print "Overflow"
  Else,
  If isEmpty(), set front = rear = 0
  Else, set front = (front - 1 + size) % size
  Insert element in queue[front]
*dequeueFront():
  If isEmpty(), print "Underflow"
  Else,
  Print queue[front]
  If front == rear, set front = rear = -1
  Else, set front = (front + 1) % size
*dequeueRear():
  If isEmpty(), print "Underflow"
  Else,
  Print queue[rear]
  If front == rear, set front = rear = -1
  Else, set rear = (rear - 1 + size) % size
*peekFront():
  If isEmpty(), print "Underflow"
  Else, print queue[front]
*peekRear():
  If isEmpty(), print "Underflow"
  Else, print queue[rear]
5.Menu Driven Program:
  5.1:Repeat until the user exits:
  5.1.1:Print menu options: Insert Front, Insert Rear, Delete Front, Delete Rear, Peek Front, Peek Rear, Display, Exit
  5.1.2:Read user choice
  5.1.3:Perform respective function call based on choice
6.Stop
program..
#include <stdio.h>

#define SIZE 50

int front = -1, rear = -1, deque[SIZE], size;

int isFull() {
    return ((rear + 1) % size == front);
}

int isEmpty() {
    return (front == -1);
}

void enqueueRear(int element) {
    if (isFull()) {
        printf("\t\tOverflow\n");
    } else {
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % size;
        }
        deque[rear] = element;
        printf("\t\tInserted element at rear: %d\n", element);
    }
}

void enqueueFront(int element) {
    if (isFull()) {
        printf("\t\tOverflow\n");
    } else {
        if (isEmpty()) {
            front = rear = 0;
        } else {
            front = (front - 1 + size) % size;
        }
        deque[front] = element;
        printf("\t\tInserted element at front: %d\n", element);
    }
}

void dequeueFront() {
    if (isEmpty()) {
        printf("\t\tUnderflow\n");
    } else {
        printf("\t\tDeleted element from front: %d\n", deque[front]);
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % size;
        }
    }
}

void dequeueRear() {
    if (isEmpty()) {
        printf("\t\tUnderflow\n");
    } else {
        printf("\t\tDeleted element from rear: %d\n", deque[rear]);
        if (front == rear) {
            front = rear = -1;
        } else {
            rear = (rear - 1 + size) % size;
        }
    }
}

void peekFront() {
    if (isEmpty()) {
        printf("\t\tUnderflow\n");
    } else {
        printf("\t\tFront element: %d\n", deque[front]);
    }
}

void peekRear() {
    if (isEmpty()) {
        printf("\t\tUnderflow\n");
    } else {
        printf("\t\tRear element: %d\n", deque[rear]);
    }
}

void display() {
    if (isEmpty()) {
        printf("Deque is empty\n");
        return;
    }

    printf("Deque elements are: ");
    for (int i = front; i != rear; i = (i + 1) % size) {
        printf("%d ", deque[i]);
    }
    // Print the last element at rear
    printf("%d\n", deque[rear]);
}

int main() {
    int choice, element;
    char cont;

    printf("\n\tPROGRAM TO INSERT, DELETE AND DISPLAY ELEMENTS IN DOUBLE-ENDED QUEUE");
    printf("\n\t.......................................................");
    printf("\n\tEnter the size of the deque: ");
    scanf("%d", &size);

    do {
        printf("\n\t\t\t\tMENU\n\n");
        printf("\t\t1.INSERT FRONT\n\t\t2.INSERT REAR\n\t\t3.DELETE FRONT\n\t\t4.DELETE REAR\n\t\t5.PEEK FRONT\n\t\t6.PEEK REAR\n\t\t7.DISPLAY\n\t\t8.EXIT\n\t\tEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\t\tEnter the element: ");
                scanf("%d", &element);
                enqueueFront(element);
                break;
            case 2:
                printf("\t\tEnter the element: ");
                scanf("%d", &element);
                enqueueRear(element);
                break;
            case 3:
                dequeueFront();
                break;
            case 4:
                dequeueRear();
                break;
            case 5:
                peekFront();
                break;
            case 6:
                peekRear();
                break;
            case 7:
                display();
                break;
            case 8:
                printf("\t\tExiting...\n");
                break;
            default:
                printf("\t\tInvalid choice\n");
        }

        if (choice != 8) {
            printf("\t\tDo you want to continue (y/n): ");
            scanf(" %c", &cont);
        }
    } while (cont == 'y' || cont == 'Y');

    return 0;
}
