#include <stdio.h>
#include <stdlib.h>

// Define the structure of the linked list node
typedef struct Node {
    int data;            // Data of the node
    struct Node *next;   // Pointer to the next node
} Node;

// Function prototypes
Node* insert_at_front(Node *head, int newInfo);
Node* insert_at_end(Node *head, int newInfo);
Node* insert_inbetween(Node *head, int x, int newInfo);
Node* deletion_start(Node *head);
Node* deletion_end(Node *head);
Node* delete_inbetween(Node *head, int key);
void printList(Node *head);

// Function to insert a node at the front of the list
Node* insert_at_front(Node *head, int newInfo) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = newInfo;
    newNode->next = head;
    head = newNode;  // Update head to the new node
    return head;
}

// Function to insert a node at the end of the list
Node* insert_at_end(Node *head, int newInfo) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = newInfo;
    newNode->next = NULL;
    if (head == NULL)
        head = newNode; // If list is empty, new node is the head
    else {
        Node *ptr = head;
        while (ptr->next != NULL) // Traverse to the last node
            ptr = ptr->next;
        ptr->next = newNode; // Link the last node to the new node
    }
    return head;
}

// Function to insert a node after a given node value
Node* insert_inbetween(Node *head, int x, int newInfo) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    newNode->data = newInfo;
    Node *ptr = head;
    while (ptr != NULL && ptr->data != x) // Traverse until the node with value x is found
        ptr = ptr->next;
    if (ptr == NULL)
        printf("Node with value %d not found!\n", x);
    else {
        newNode->next = ptr->next; // Set new node's next to the next of ptr
        ptr->next = newNode;       // Set ptr's next to the new node
    }
    return head;
}

// Function to delete the first node of the list
Node* deletion_start(Node *head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return head;
    }
    Node *ptr = head;
    head = head->next; // Move head to the next node
    free(ptr);         // Free the memory of the original head node
    printf("Node deleted from the front.\n");
    return head;
}

// Function to delete the last node of the list
Node* deletion_end(Node *head) {
    if (head == NULL) {
        printf("List is empty!\n");
        return head;
    }
    if (head->next == NULL) { // Only one node in the list
        free(head);
        head = NULL;
        printf("Node deleted from the end.\n");
        return head;
    }
    Node *ptr = head, *prev = NULL;
    while (ptr->next != NULL) { // Traverse until the last node
        prev = ptr;
        ptr = ptr->next;
    }
    prev->next = NULL; // Set the second last node's next to NULL
    free(ptr);         // Free the memory of the last node
    printf("Node deleted from the end.\n");
    return head;
}

// Function to delete a node with a specific value
Node* delete_inbetween(Node *head, int key) {
    if (head == NULL) {
        printf("List is empty!\n");
        return head;
    }
    Node *ptr1 = head, *ptr2 = NULL;
    while (ptr1 != NULL && ptr1->data != key) {
        ptr2 = ptr1;
        ptr1 = ptr1->next;
    }
    if (ptr1 == NULL) {
        printf("Node with value %d not found!\n", key);
    } else {
        if (ptr2 == NULL) { // Node to be deleted is the head
            head = head->next;
        } else {
            ptr2->next = ptr1->next; // Bypass the node to be deleted
        }
        free(ptr1); // Free the node memory
        printf("Node with value %d deleted.\n", key);
    }
    return head;
}

// Function to print the linked list
void printList(Node *head) {
    Node *temp = head;
    if (temp == NULL) {
        printf("Linked List is empty!\n");
    } else {
        while (temp != NULL) {
            printf("%d -> ", temp->data);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}

// Main function to demonstrate the menu-driven linked list operations
int main() {
    Node *head = NULL; // Initial empty list
    int choice, value, key;

    do {
        printf("\nMenu: \n1. Insert at front\n2. Insert at end\n3. Insert in between\n4. Delete from front\n5. Delete from end\n6. Delete a specific node\n7. Print List\n8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to insert at the front: ");
                scanf("%d", &value);
                head = insert_at_front(head, value);
                break;
            case 2:
                printf("Enter the value to insert at the end: ");
                scanf("%d", &value);
                head = insert_at_end(head, value);
                break;
            case 3:
                printf("Enter the value after which to insert: ");
                scanf("%d", &key);
                printf("Enter the value to insert: ");
                scanf("%d", &value);
                head = insert_inbetween(head, key, value);
                break;
            case 4:
                head = deletion_start(head);
                break;
            case 5:
                head = deletion_end(head);
                break;
            case 6:
                printf("Enter the value to delete: ");
                scanf("%d", &key);
                head = delete_inbetween(head, key);
                break;
            case 7:
                printList(head);
                break;
            case 8:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 8);

    return 0;
}
Initial Linked List: Empty

Inserting 10 at the front:
10 -> NULL

Inserting 20 at the end:
10 -> 20 -> NULL

Inserting 15 after 10:
10 -> 15 -> 20 -> NULL

Deleting from the front:
15 -> 20 -> NULL

Deleting from the end:
15 -> NULL

Inserting 25 at the end:
15 -> 25 -> NULL

Inserting 30 after 15:
15 -> 30 -> 25 -> NULL

Deleting node with value 30:
15 -> 25 -> NULL

Printing the final list:
15 -> 25 -> NULL
### Algorithms for Linked List Operations

Below are detailed algorithms for each function in the menu-driven linked list program. Each algorithm is broken down step-by-step to help understand how each operation is implemented.

---

### 1. **Algorithm for `insertion_at_front(Node *head, int newInfo)`**

**Purpose:** Insert a new node at the beginning of the linked list.

1. **Input:** `head` (pointer to the first node of the linked list), `newInfo` (the data value for the new node)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. Create a new node using the `createNode(newInfo)` function.
   2. Set `newNode->next` to `head`.
   3. Update `head` to point to the new node (`head = newNode`).
   4. Return the updated `head` pointer.

---

### 2. **Algorithm for `insertion_at_end(Node *head, int newInfo)`**

**Purpose:** Insert a new node at the end of the linked list.

1. **Input:** `head` (pointer to the first node of the linked list), `newInfo` (the data value for the new node)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. Create a new node using the `createNode(newInfo)` function.
   2. If `head` is `NULL`, set `head` to `newNode` and return `head`.
   3. Otherwise, initialize a pointer `ptr` to `head`.
   4. Traverse the linked list until `ptr->next` is `NULL`.
   5. Set `ptr->next` to `newNode`.
   6. Return the updated `head` pointer.

---

### 3. **Algorithm for `insert_inbetween(Node *head, int x, int newInfo)`**

**Purpose:** Insert a new node after a given value `x` in the linked list.

1. **Input:** `head` (pointer to the first node), `x` (value after which to insert), `newInfo` (data for the new node)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. Create a new node using the `createNode(newInfo)` function.
   2. Initialize `ptr` to `head`.
   3. Traverse the linked list until `ptr` is not `NULL` and `ptr->data` is not equal to `x`.
   4. If `ptr` is `NULL`, print "Node with value `x` not found!" and return `head`.
   5. Set `newNode->next` to `ptr->next`.
   6. Set `ptr->next` to `newNode`.
   7. Return the updated `head` pointer.

---

### 4. **Algorithm for `deletion_start(Node *head)`**

**Purpose:** Delete the first node of the linked list.

1. **Input:** `head` (pointer to the first node)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. If `head` is `NULL`, print "List is empty!" and return `head`.
   2. Initialize a pointer `ptr` to `head`.
   3. Update `head` to `head->next`.
   4. Free the memory of `ptr`.
   5. Print "Node deleted from the front."
   6. Return the updated `head` pointer.

---

### 5. **Algorithm for `deletion_end(Node *head)`**

**Purpose:** Delete the last node of the linked list.

1. **Input:** `head` (pointer to the first node)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. If `head` is `NULL`, print "List is empty!" and return `head`.
   2. If `head->next` is `NULL`, free `head`, set `head` to `NULL`, print "Node deleted from the end." and return `head`.
   3. Initialize a pointer `ptr` to `head` and a `prev` pointer as `NULL`.
   4. Traverse the linked list until `ptr->next` is `NULL`, setting `prev` to `ptr` in each iteration.
   5. Set `prev->next` to `NULL`.
   6. Free the memory of `ptr`.
   7. Print "Node deleted from the end."
   8. Return the updated `head` pointer.

---

### 6. **Algorithm for `delete_inbetween(Node *head, int key)`**

**Purpose:** Delete a node with a specific value `key` from the linked list.

1. **Input:** `head` (pointer to the first node), `key` (value of the node to delete)
2. **Output:** Pointer to the updated `head` node of the linked list
3. **Steps:**
   1. If `head` is `NULL`, print "List is empty!" and return `head`.
   2. Initialize a pointer `ptr` to `head` and a `prev` pointer as `NULL`.
   3. Traverse the linked list until `ptr` is not `NULL` and `ptr->data` is not equal to `key`.
   4. If `ptr` is `NULL`, print "Node with value `key` not found!" and return `head`.
   5. If `prev` is `NULL` (node to be deleted is the head), update `head` to `head->next`.
   6. Otherwise, set `prev->next` to `ptr->next`.
   7. Free the memory of `ptr`.
   8. Print "Node with value `key` deleted."
   9. Return the updated `head` pointer.

---

### 7. **Algorithm for `printList(Node *head)`**

**Purpose:** Print all nodes in the linked list.

1. **Input:** `head` (pointer to the first node)
2. **Output:** Printed values of the linked list
3. **Steps:**
   1. If `head` is `NULL`, print "Linked List is empty!" and return.
   2. Initialize `temp` to `head`.
   3. While `temp` is not `NULL`, print `temp->data` followed by `->`.
   4. Set `temp` to `temp->next`.
   5. Print "NULL" at the end to signify the end of the list.

---

Let me know if you'd like to make any modifications or add other functionalities to the linked list program!
