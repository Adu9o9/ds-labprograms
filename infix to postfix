#include <stdio.h>
#include <string.h>

#define MAX 50

char stk[MAX];
int stk1[MAX];
int top = -1, top1 = -1, j = 0;
char post[MAX];

// Function to push operator onto stack
void push(char ch) {
    stk[++top] = ch;
}

// Function to push operand onto operand stack
void push1(int ch) {
    stk1[++top1] = ch;
}

// Function to determine the priority of operators
int priority(char c) {
    if (c == '+' || c == '-')
        return 1;
    else if (c == '*' || c == '/')
        return 2;
    else if (c == '^')
        return 3;
    else
        return 0;
}

// Function to evaluate the postfix expression
void read() {
    int c, op1, op2, x;
    char ch;
    
    for (int i = 0; post[i] != '\0'; i++) {
        ch = post[i];
        // Use ASCII code range to check if the character is an operand
        if ((ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122)) {  // 'A'-'Z' or 'a'-'z'
            printf("\n\tEnter the value for %c: ", ch);
            scanf("%d", &c);
            push1(c);  // Push the value onto the operand stack
        } else {  // If it's an operator
            op2 = stk1[top1--];  // Pop the second operand
            op1 = stk1[top1--];  // Pop the first operand
            switch (ch) {
                case '+': x = op1 + op2;
                          break;
                case '-': x = op1 - op2;
                          break;
                case '*': x = op1 * op2;
                          break;
                case '/': x = op1 / op2;
                          break;
                case '^': x = op1 ^ op2;  // XOR, could be replaced with power operator if needed
                          break;
            }
            push1(x);  // Push the result back onto the operand stack
        }
    }
    
    printf("\n\tValue of the expression is: %d", stk1[top1]);  // Final result is at the top of operand stack
}

// Main function for infix to postfix conversion
int main() {
    char a[MAX], ch;
    int i, x, y;

    printf("\n\n\tProgram for Infix to Postfix Evaluation");
    printf("\n\t----------------------------------------\n");
    printf("\n\tEnter the infix expression: ");
    gets(a);  // Read infix expression

    for (i = 0; a[i] != '\0'; i++) {
        ch = a[i];  // Read character one by one
        switch (ch) {
            case '(': 
                push(ch);
                break;
            case ')': 
                while (stk[top] != '(') {
                    post[j++] = stk[top--];
                }
                top--; // Remove '(' from stack
                break;
            case '+':
            case '-':
            case '*':
            case '/':
            case '^': 
                if (top == -1 || stk[top] == '(') {
                    push(ch);
                } else {
                    x = priority(ch);
                    y = priority(stk[top]);
                    if (y >= x) {
                        post[j++] = stk[top--];
                        push(ch);
                    } else {
                        push(ch);
                    }
                }
                break;
            default: 
                // Use ASCII code range to check if the character is an alphabet
                if ((ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122)) {  // 'A'-'Z' or 'a'-'z'
                    post[j++] = ch;
                }
                break;
        }
    }

    // Pop remaining operators from stack
    while (top != -1) {
        post[j++] = stk[top--];
    }
    post[j] = '\0';  // Null-terminate the postfix expression
    
    printf("\n\tPostfix expression: ");
    puts(post);  // Display postfix expression
    
    read();  // Evaluate the postfix expression

    return 0;
}
Here's the updated **algorithm** for converting **infix to postfix** and **evaluating the postfix expression**, reflecting the corrections and changes from the final program. The algorithm now follows the flow of control based on the logic in the program, such as using ASCII values to identify operands instead of `isalpha()`.

### **Infix to Postfix Conversion Algorithm**

1. **Start**
2. **Input**: Read the infix expression `a`.
3. **Initialize**: Set `top = -1`, `j = 0` (for postfix expression), and an empty stack `stk[]`.
4. **For each character** `ch` in the infix expression `a`:
    1. If `ch == '('`, push it onto the stack.
    2. If `ch == ')'`, pop and append each operator from the stack to the postfix expression until a `'('` is encountered. Then, discard `'('`.
    3. If `ch == '+' or '-' or '*' or '/' or '^'` (an operator):
        1. If the stack is empty (`top == -1`) or the top of the stack contains `'('`, push `ch` onto the stack.
        2. Else, compare the priority of `ch` with the operator on top of the stack:
            1. If the priority of the top operator is greater than or equal to `ch`, pop the operator from the stack and append it to the postfix expression, then push `ch` onto the stack.
            2. Otherwise, push `ch` onto the stack.
    4. If `ch` is an **operand** (detected using ASCII values: between `A-Z` or `a-z`), append it directly to the postfix expression.
5. **Pop remaining operators** from the stack and append them to the postfix expression.
6. **Terminate** the postfix expression by appending `'\0'`.
7. **Output**: Display the postfix expression.

---

### **Postfix Evaluation Algorithm**

1. **Start**
2. **Input**: Use the postfix expression obtained from the infix-to-postfix conversion.
3. **For each character** `ch` in the postfix expression:
    1. If `ch` is an **operand** (detected using ASCII values: between `A-Z` or `a-z`):
        1. Prompt the user to **input a value** for `ch`.
        2. Push the value onto the operand stack `stk1[]`.
    2. If `ch` is an **operator** (`+`, `-`, `*`, `/`, `^`):
        1. Pop the top two operands from `stk1[]` (first operand is `op2`, second is `op1`).
        2. Perform the operation based on the operator:
            - If `ch == '+'`, set `result = op1 + op2`.
            - If `ch == '-'`, set `result = op1 - op2`.
            - If `ch == '*'`, set `result = op1 * op2`.
            - If `ch == '/'`, set `result = op1 / op2`.
            - If `ch == '^`, set `result = op1 ^ op2`.
        3. Push the result back onto `stk1[]`.
4. **End loop**.
5. **Output**: The final value at the top of the operand stack `stk1[]` is the result of the postfix expression.
6. **End**.

---

### Example Walkthrough:

**Infix Expression**:  
`a + b * (c - d)`

**Step-by-Step Process**:
- Read character: `a` → Append to postfix (`post[] = "a"`).
- Read character: `+` → Push onto stack (`stk[] = "+"`).
- Read character: `b` → Append to postfix (`post[] = "ab"`).
- Read character: `*` → Push onto stack (`stk[] = "+ *"`).
- Read character: `(` → Push onto stack (`stk[] = "+ * ("`).
- Read character: `c` → Append to postfix (`post[] = "abc"`).
- Read character: `-` → Push onto stack (`stk[] = "+ * ( -"`).
- Read character: `d` → Append to postfix (`post[] = "abcd"`).
- Read character: `)` → Pop operators until `(` is encountered, append to postfix (`post[] = "abcd - * +"`).

**Postfix Expression**:  
`a b c d - * +`

**Postfix Evaluation**:
- Read `a` → Input value for `a` (e.g., `2`), push onto operand stack (`stk1[] = "2"`).
- Read `b` → Input value for `b` (e.g., `3`), push onto operand stack (`stk1[] = "2 3"`).
- Read `c` → Input value for `c` (e.g., `5`), push onto operand stack (`stk1[] = "2 3 5"`).
- Read `d` → Input value for `d` (e.g., `1`), push onto operand stack (`stk1[] = "2 3 5 1"`).
- Read `-` → Pop `5` and `1`, calculate `5 - 1 = 4`, push result (`stk1[] = "2 3 4"`).
- Read `*` → Pop `3` and `4`, calculate `3 * 4 = 12`, push result (`stk1[] = "2 12"`).
- Read `+` → Pop `2` and `12`, calculate `2 + 12 = 14`, push result (`stk1[] = "14"`).

**Final Result**:  
`14`

---

This algorithm reflects the flow of the corrected code and should help you understand each step as it processes through the infix-to-postfix conversion and the evaluation of the postfix expression.
