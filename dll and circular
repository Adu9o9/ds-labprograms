#include <stdio.h>
#include <stdlib.h>

typedef struct Node
{
    int data;
    struct Node *next;
    struct Node *prev;
} Node;

Node *createNode(int info)
{
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = info;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}
Node *insert_at_front(Node *head, int info)
{
    Node *newNode = createNode(info);
    newNode->next = head;
    if(head!=NULL){
        head->prev = newNode;
    }
    head = newNode;
    return head;
}
Node *insert_at_end(Node *head, int info)
{
    Node *newNode = createNode(info);
    if (head == NULL)
    {
        return newNode;
    }
    else
    {
        Node *ptr = head;
        while (ptr->next != NULL)
        {
            ptr = ptr->next;
        }
        ptr->next = newNode;
        newNode->prev = ptr;
    }
    return head;
}
Node *insertafter_specificNode(Node *head, int key, int info)
{
    Node *newNode = createNode(info);
    Node *ptr = head;
    while (ptr != NULL && ptr->data != key)
    {
        ptr = ptr->next;
    }
    if (ptr == NULL)
    {
        printf("the key=%d is not found in list", key);
    }
    else
    {
        newNode->next = ptr->next;
        newNode->prev = ptr;
        if(ptr->next!=NULL){
            ptr->next->prev = newNode;
        }
        ptr->next = newNode;
    }
    return head;
}
Node *delete_at_begining(Node *head)
{
    if (head == NULL)
    {
        printf("list empty");
        return head;
    }
    else
    {
        Node *ptr = head;
        head = head->next;
        if(head!=NULL){
            head->prev = NULL;
        }
        free(ptr);
        printf("Node deleted from the begining");
        return head;
    }
}
Node *delete_at_end(Node *head)
{
    if (head == NULL)
    {
        printf("list empty");
        return head;
    }

    if (head->next == NULL)
    {
        free(head);
        head = NULL;
        printf("Node deleted from end");
        return NULL;
    }
    Node *ptr = head;
    while (ptr->next != NULL)
    {
        
        ptr = ptr->next;
    }
    ptr->prev->next = NULL;
    free(ptr);
    printf("Node deleted from the end\n");
    return head;
}
Node *delete_after_specificNode(Node *head, int key)
{
    if (head == NULL)
    {
        printf("list empty");
        return head;
    }
    Node *ptr = head,*prev=NULL;

    while (ptr != NULL && ptr->data != key)
    {
        ptr = ptr->next;
    }
    if (ptr == NULL)
    {
        printf("the key=%d is not found in list", key);
    }
    if(ptr==head){
        head = head->next;
        if (head != NULL)
        {
            head->prev = NULL;
        }
        free(ptr);
        printf("Node deleted from the begining");
        return head;
    }
    
        if(ptr->next!=NULL){
        prev->next->prev = ptr->prev;
        }
        ptr->prev->next = ptr->next;
        free(ptr);
        printf("node deleted with key=%d\n", key);
    
    return head;
}
void printList(Node *head)
{
    Node *temp = head;
    if (temp == NULL)
    {
        printf("empty list");
    }
    else{
        printf("NULL<->");

        while (temp != NULL)
        {
            printf("%d<->", temp->data);
            temp = temp->next;
    }
    printf("NULL\n");
    }
}
/*void printList(Node *head){
    if (head == NULL) {
        return;
    }
    else{
        printList(head->next);
        printf("%d->",head->data);
        }
        //printf("NULL\n");
        }*/
int main()
{
    Node *head = NULL;
    int choice, key, value;
    printf("\t \t \t Menu \t \t \t \n \n1.CREATION\n2.DISPLAY\n3.INSERT AT THE BEGINING\n4.INSERT AT THE END \n5.INSERT AFTER SPECIFIC NODE\n6.DELETE AT THE START\n7.DELETE AT THE END\n8.DELETE A SPECIFIC NODE\n9.EXIT\n");

    do
    {
        printf("Enter your choice(1-9):");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter data of node to be inserted");
            scanf("%d", &value);
            head = createNode(value);
            break;
        case 2:
            printList(head);
            break;
        case 3:
            printf("Enter data of node to be inserted");
            scanf("%d", &value);
            head = insert_at_front(head, value);
            break;
        case 4:
            printf("Enter data of node to be inserted");
            scanf("%d", &value);
            head = insert_at_end(head, value);
            break;
        case 5:
            printf("Enter the key after which the node is inserted");
            scanf("%d", &key);
            printf("Enter data of node to be inserted");
            scanf("%d", &value);
            head = insertafter_specificNode(head, key, value);
            break;
        case 6:

            head = delete_at_begining(head);
            break;
        case 7:

            head = delete_at_end(head);
            break;
        case 8:
            printf("Enter the key where the node be deleted");
            scanf("%d", &key);
            head = delete_after_specificNode(head, key);
            break;
        case 9:
            printf("Exiting Program.....");
            break;
        default:
            printf("Invalid choice entered.");
            break;
        }
    } while (choice != 9);
    return 0;
}







Circular 
 #include <stdio.h>
#include <stdlib.h>

// Node structure
typedef struct Node
{
    int data;
    struct Node *next;
} Node;

Node *head = NULL;

// Function to create a new node
Node *createNode(int info)
{
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->data = info;
    newNode->next = NULL;
    return newNode;
}

// Insertion at the front of the circular linked list
Node *insert_at_front(Node *head, int info)
{
    Node *newNode = createNode(info);
    if (head == NULL)
    {
        newNode->next = newNode;  // Point to itself
        head = newNode;
    }
    else
    {
        Node *ptr = head;
        while (ptr->next != head)  // Traverse to the last node
        {
            ptr = ptr->next;
        }
        newNode->next = head;
        ptr->next = newNode;
        head = newNode;
    }
    return head;
}

// Insertion at the end of the circular linked list
Node *insert_at_end(Node *head, int info)
{
    Node *newNode = createNode(info);
    if (head == NULL)
    {
        newNode->next = newNode;  // Point to itself
        head = newNode;
    }
    else
    {
        Node *ptr = head;
        while (ptr->next != head)  // Traverse to the last node
        {
            ptr = ptr->next;
        }
        ptr->next = newNode;
        newNode->next = head;  // Complete the circular link
    }
    return head;
}

// Insertion after a specific node in the circular linked list
Node *insertafter_specificNode(Node *head, int key, int info)
{
    Node *newNode = createNode(info);
    Node *ptr = head;
    do
    {
        if (ptr->data == key)
        {
            newNode->next = ptr->next;
            ptr->next = newNode;
            return head;
        }
        ptr = ptr->next;
    } while (ptr != head);  // Traverse until we reach the head again

    printf("The key=%d is not found in the list\n", key);
    return head;
}

// Deletion at the beginning of the circular linked list
Node *delete_at_beginning(Node *head)
{
    if (head == NULL)
    {
        printf("List empty\n");
        return head;
    }
    if (head->next == head)  // Only one node in the list
    {
        free(head);
        head = NULL;
        printf("Node deleted from the beginning\n");
    }
    else
    {
        Node *ptr = head;
        Node *temp = head;
        while (ptr->next != head)  // Traverse to the last node
        {
            ptr = ptr->next;
        }
        head = head->next;  // Update head
        ptr->next = head;  // Last node points to the new head
        free(temp);
        printf("Node deleted from the beginning\n");
    }
    return head;
}

// Deletion at the end of the circular linked list
Node *delete_at_end(Node *head)
{
    if (head == NULL)
    {
        printf("List empty\n");
        return head;
    }
    if (head->next == head)  // Only one node in the list
    {
        free(head);
        head = NULL;
        printf("Node deleted from end\n");
    }
    else
    {
        Node *ptr = head;
        Node *prev = NULL;
        while (ptr->next != head)  // Traverse to the last node
        {
            prev = ptr;
            ptr = ptr->next;
        }
        prev->next = head;  // Update the second last node's next pointer
        free(ptr);
        printf("Node deleted from the end\n");
    }
    return head;
}

// Deletion of a specific node in the circular linked list
Node *delete_after_specificNode(Node *head, int key)
{
    if (head == NULL)
    {
        printf("List empty\n");
        return head;
    }
    Node *ptr = head;
    Node *prev = NULL;
    do
    {
        prev = ptr;
        ptr = ptr->next;
    } while (ptr != head && prev->data != key);

    if (prev->data == key && ptr != head)
    {
        prev->next = ptr->next;
        free(ptr);
        printf("Node deleted with key=%d\n", key);
    }
    else
    {
        printf("The key=%d is not found in the list\n", key);
    }
    return head;
}

// Function to print the circular linked list
void printList(Node *head)
{
    if (head == NULL)
    {
        printf("List empty\n");
        return;
    }
    Node *temp = head;
    do
    {
        printf("%d->", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("HEAD\n");
}

// Main function to demonstrate the operations
int main()
{
    Node *head = NULL;
    int choice, key, value;
    printf("\tCircular Linked List Operations\n1. Insert at Beginning\n2. Insert at End\n3. Insert After Specific Node\n4. Delete at Beginning\n5. Delete at End\n6. Delete After Specific Node\n7. Display List\n8. Exit\n");

    do
    {
        printf("Enter your choice (1-8): ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter data of node to be inserted: ");
            scanf("%d", &value);
            head = insert_at_front(head, value);
            break;
        case 2:
            printf("Enter data of node to be inserted: ");
            scanf("%d", &value);
            head = insert_at_end(head, value);
            break;
        case 3:
            printf("Enter the key after which the node is to be inserted: ");
            scanf("%d", &key);
            printf("Enter data of node to be inserted: ");
            scanf("%d", &value);
            head = insertafter_specificNode(head, key, value);
            break;
        case 4:
            head = delete_at_beginning(head);
            break;
        case 5:
            head = delete_at_end(head);
            break;
        case 6:
            printf("Enter the key where the node should be deleted: ");
            scanf("%d", &key);
            head = delete_after_specificNode(head, key);
            break;
        case 7:
            printList(head);
            break;
        case 8:
            printf("Exiting Program.....\n");
            break;
        default:
            printf("Invalid choice entered.\n");
            break;
        }
    } while (choice != 8);
    return 0;
}
